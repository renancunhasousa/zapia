
import { getUserConfig, isAuthorized, addInteractions, setFirstTime, IConfig, resetUserInteractions } from "./config";
import { searchKnowledgeBase, handleIncomingMessage } from "./handlers/message";
import qrcode from "qrcode-terminal";
import { Message, Events, MessageMedia, Buttons } from "whatsapp-web.js";
import constants from "./types/constants.ts";
import * as cli from "./cli/ui";
import client from './types/client.ts'
import { handleMessageGPT, handleDeleteConversation } from "./handlers/gpt";
import fs from 'fs';
import { cancelCommand, handleStkCommand, handleVarCommand, handleUrsCommand,
	handleMp4Command, handlePptCommand, handleImgCommand, handleClmCommand, 
	handleNetCommand, handleBotCommand, handleAudCommand, handleAdmCommand, 
	handleUrlCommand, handleSubCommand, 
	} from "./commands.ts"

const stripe = require('stripe')(process.env.STRIPE_KEY);


//************************************************************************************//


let botReadyTimestamp: Date | null = null;
const botPhoneNumber = '5519991522140@c.us';
let userPhone = '';
const userConfigs: { [userPhone: string]: IConfig } = {};
const debounceTimers = {};
const debounceTime = 1000;


//************************************************************************************//


const userSettings = {
    ttsStatus: {},
    transcriptionStatus: {},
    promptStatus: {},
    authorized: {},
    states: {},
    interactions: {},
    limitedInteractions: {},
    ttsMode: {},
    txtMode: {},
    voiceIDaws: {},
	voiceIDopenai: {},
    gptModel: {},
    urlPlatform: {},
    imgModel: {},
    gptOnOff: {},
    authCmd: {}
};

//************************************************************************************//



// Ponto de entrada
const start = async () => {
	cli.printIntro();

	// Autentica√ß√£o do WhatsApp
	client.on(Events.QR_RECEIVED, (qr: string) => {
		qrcode.generate(qr, { small: true }, (qrcode: string) => {
			cli.printQRCode(qrcode); // Imprime o QR Code
		});
	});

	// Carregamento do WhatsApp
	client.on(Events.LOADING_SCREEN, (percent) => {
		if (percent == "0") {
			cli.printLoading(); // Imprime mensagem de carregamento
		}
	});

	// Autentica√ß√£o do WhatsApp bem-sucedida
	client.on(Events.AUTHENTICATED, () => {
		cli.printAuthenticated(); // Imprime mensagem de autentica√ß√£o bem-sucedida
		
	});

	// Falha na autentica√ß√£o do WhatsApp
	client.on(Events.AUTHENTICATION_FAILURE, () => {
		cli.printAuthenticationFailure(); // Imprime mensagem de falha na autentica√ß√£o
	});

	// WhatsApp pronto
	client.on(Events.READY, () => {
		cli.printOutro(); // Imprime mensagem final

		// Define o timestamp de quando o bot est√° pronto
		botReadyTimestamp = new Date();
	});


//************************************************************************************//


// Mensagem do WhatsApp
client.on(Events.MESSAGE_RECEIVED, async (message: any) => {
	userPhone = message.from;

	// Verifica se a mensagem foi enviada pelo pr√≥prio bot
	if (userPhone === botPhoneNumber) return;
	
	if (!userConfigs[userPhone]) {
		userConfigs[userPhone] = await getUserConfig(userPhone);
	}

	const userConfig = userConfigs[userPhone];	
	const isGroupMessage = (await message.getChat()).isGroup;

	if (!isGroupMessage && (userConfig.isFirstTime === undefined || userConfig.isFirstTime === true)) {
		if (debounceTimers[userPhone]) {
			clearTimeout(debounceTimers[userPhone]);
		}
		debounceTimers[userPhone] = setTimeout(async () => {
			const pdfPath = 'D:/zapia/zapia.pdf';
			const pdfBuffer = fs.readFileSync(pdfPath);
			const pdfMedia = new MessageMedia('application/pdf', pdfBuffer.toString('base64'), 'Zap.IA manual üìù');
	
			await message.reply(pdfMedia);
	
			userConfig.isFirstTime = false;
			await setFirstTime(userConfig, false, userPhone);
		}, debounceTime);
	}

	  
//************************************************************************************//


const voiceIdMapAws = {
    'Ricardo': 'Ricardo (portugu√™s)',
    'Vitoria': 'Vitoria (portugu√™s)',
    'Kevin': 'Kevin (ingl√™s)',
    'Kimberly': 'Kimberly (ingl√™s)',
};
const voiceIdMapOpenai = {
    'alloy': 'Alloy',
    'echo': 'Echo',
    'fable': 'Echo',
    'onyx': 'Onyx',
	'nova': 'Nova',
	'shimmer': 'Shimmer',
};

const statusTtsMode = userSettings.ttsMode[userPhone] ?? userConfig.ttsMode;
const userVoiceAwsId = userSettings.voiceIDaws[userPhone] ?? userConfig.awsPollyVoiceId;
const userVoiceOpenaiId = userSettings.voiceIDopenai[userPhone] ?? userConfig.awsPollyVoiceId;
const voiceName = statusTtsMode === "aws-polly" 
    ? voiceIdMapAws[userVoiceAwsId] ?? "Ricardo" 
    : voiceIdMapOpenai[userVoiceOpenaiId] ?? "Alloy";
const statusTts = userSettings.ttsStatus[userPhone] ?? userConfig.ttsEnabled ? 'üü¢ ON' : 'üî¥ OFF';
const statusTsr = userSettings.transcriptionStatus[userPhone] ?? userConfig.transcriptionEnabled ? 'üü¢ ON' : 'üî¥ OFF';
const statusTxtMode = userSettings.txtMode[userPhone] ?? userConfig.transcriptionMode;
const statusPrompt = userSettings.promptStatus[userPhone] || userConfig.prePrompt || 'vazio';
const statusVip = userSettings.authorized[userPhone] ?? userConfig.authorized ? 'üü¢ ON' : 'üî¥ OFF';
const statusInt = userSettings.interactions[userPhone] ?? userConfig.userInteractions;
const statusLim = statusVip === 'üü¢ ON' ? '‚àû' : (userSettings.limitedInteractions[userPhone] ?? userConfig.limitedInteractions);
const statusGpt = userSettings.gptModel[userPhone] ?? userConfig.openAIModel;
const statusDalle = userConfig.dalleModel === 'DALLE2' ? '512x512' : (userConfig.dalleModel === 'DALLE3' ? '1024x1024' : 'padr√£o');
const statusUrl = userSettings.urlPlatform[userPhone] ?? userConfig.urlShorten;
const statusImg = userSettings.imgModel[userPhone] ?? userConfig.dalleModel;
const statusGptOnOff = userSettings.gptOnOff[userPhone] ?? (userConfig.searchTool ? 'conectado' : 'desconectado');


//************************************************************************************//



		// Verifica a autoriza√ß√£o e limites do usu√°rio VIP
async function verifyUserLimits(userPhone) {
    const userConfig = await getUserConfig(userPhone);

    // Se o usu√°rio estiver autorizado, n√£o h√° necessidade de verificar os limites
    if (await isAuthorized(userPhone, userConfig)) {
        return false;
    }

    // Verifica se o usu√°rio atingiu o limite de intera√ß√µes
    if (userConfig.userInteractions >= userConfig.limitedInteractions) {
        const limitMessage = 
           	'üí¨ As suas *25* intera√ß√µes di√°rias chegaram ao fim, mas n√£o se preocupe '+
			'pois suas intera√ß√µes ser√£o restauradas as *00:00* do pr√≥ximo dia. Enquanto isso, '+
			'voc√™ pode desfrutar de outras diversas ferramentas gratuitas incr√≠veis '+
			'como previs√µes do tempo, cria√ß√£o stickers personalizados, encurtamento URLs '+
			'baixar v√≠deos do YouTube Shorts, e  etc. Use *.menu* e veja os comandos dispon√≠veis!\n\n'+
			
			'Se voc√™ estiver interessado em intera√ß√µes ilimitadas ou usufrfuir de recursos'+
			'adicionais de configura√ß√£o como por exemplo, o uso do GPT4, Dalle3, configura√ß√µes de voz, '+
			'que s√£o intelig√™ncias mais avan√ßadas, temos algumas op√ß√µes para voc√™:\n\n'+

			'Use o comando üïπÔ∏è *.sub* e veja nossos planos dispon√≠veis, ou consulte o nosso cat√°logo aqui no WhatsApp.\n\n'+

			'Qualquer contribu√ß√£o √© bem vinda! Com ela somos capazes de manter o bot ativo e as intelig√™ncias '+
			'artificiais em funcionamento, onde ambos possuem custo. Caso contribua com qualquer valor, como forma de '+
			'agradecimentos resetamos as 25 intera√ß√µes di√°rias dispon√≠veis para que possa usar nosso bot novamente._'

        message.reply(limitMessage);
        return true;
    }

    return false;
}

//************************************************************************************//

// Chama a fun√ß√£o verifyUserLimits no in√≠cio
if (await verifyUserLimits(userPhone)) {
    return;
}

//************************************************************************************//

// Verificando e inicializando o estado do usu√°rio
if (!userSettings.states[userPhone]) {
    userSettings.states[userPhone] = {
        command: null,
        waitingForResponse: false
    };
}

//************************************************************************************//

// Acessando o estado do usu√°rio
const userState = userSettings.states[userPhone];


if (userState.waitingForResponse) {
			
	switch (userState.activeCommand) {

				case '.stk':
					if (message.body === '0') cancelCommand(message);
					else handleStkCommand(message, message.from, client);
					break;

				case '.var':
					if (message.body === '0') cancelCommand(message);
					else handleVarCommand(message, userConfig, userPhone);
					break;

				case '.urs':
					if (message.body === '0') cancelCommand(message);
					else handleUrsCommand(message, message.body, userConfig, client);
					break;

				case '.mp4':
					if (message.bodyompt === '0') cancelCommand(message);
					else handleMp4Command(client, message, message.body);
					break;				

				case '.ppt':
					handlePptCommand(message, userConfig, message.body);
					break;

				case '.img':
					if (message.body === '0') cancelCommand(message);
					else handleImgCommand(message, userConfig, message.body);
					break;
				
				case '.gpt':
					if (message.body === '0') cancelCommand(message);
					else handleMessageGPT(message, message.body, userConfig, client, userPhone);
					break;
						
				case '.clm':
					if (message.body === '0') cancelCommand(message);
					else handleClmCommand(message.body, message, client);
					break;
				
				case '.net':
					if (message.body === '0') cancelCommand(message);
					else handleNetCommand(message, message.body);
					break;

				case '.bot':
					if (message.body === '0') cancelCommand(message);
					else handleBotCommand(userConfig, userPhone, message.body, message);
					break;
					
				case '.aud':
					if (message.body === '0') cancelCommand(message);
					else handleAudCommand(userConfig, userPhone, message.body, message, statusTtsMode);
					break;
	
				case '.adm':
					const targetUserPhone = userState.targetUserPhone;
					if (message.body === '0') cancelCommand(message);
					else handleAdmCommand(userConfig, targetUserPhone, message.body, message);
					break;
					
				case '.url':
					if (message.body === '0') cancelCommand(message);
					else handleUrlCommand(userConfig, userPhone, message.body, message);
					break;
	
				case '.sub':
					if (message.body === '0') cancelCommand(message);
					else handleSubCommand(message.body, message);
					break;
	
				}

			userState.waitingForResponse = false;
			userState.activeCommand = null;
			return

				} else {	

					
//************************************************************************************//


					//Comandos dispon√≠veis para usuarios n√£o autorizados
					if (message.body.startsWith('.')) {
						if (userConfig.authorizedCommand || 
							(!userConfig.authorizedCommand && message.body.startsWith ('.adm 5519998790929@c.us')) 
							// || entre com comandos para n√£o autorizados
							){
						let command = message.body;
						console.log("Comando dentro do switch:", command);
					
					switch(true) {

					
						case command.startsWith('.int'):
							if (message.from !== '5519998790929@c.us') {
								message.reply('üí¨ _Desculpe, voc√™ n√£o tem permiss√£o para usar este comando._')
								return;
								} else {
       								 resetUserInteractions();
									client.sendMessage(message.from, "üí¨ _Intera√ß√µes resetadas com sucesso!_");
       							}
						return;

						case command.startsWith('.sub'):
							userState.waitingForResponse = true;
							userState.activeCommand = '.sub';
							let subResponse = 
							  'üïπ *.sub*\n\n'+
							  'üí¨ _Gostar√≠amos de lembrar que a *Zap.IA* oferece recursos '+
							  'valiosos e personalizados para melhorar sua experi√™ncia de comunica√ß√£o.'+
							  'Gostar√≠amos sempre de saber como podemos melhorar nosso servi√ßo para atender √†s suas necessidades '+
							  'sempre que quiser/puder converse conosco atrav√©s de um de nossos canais de contato descrito ao final '+
							  'dessa mensagem. Segue nossas op√ß√µes de contribui√ß√£o. Me envie o n√∫mero da op√ß√£o que deseja mais detalhes_'+
							  '\n\n'+
							  
							  '1Ô∏è‚É£ Plano Basic\n'+
							  '2Ô∏è‚É£ Plano VIP\n'+
							  '3Ô∏è‚É£ PIX, contato\n'+
							  '4Ô∏è‚É£ Gerenciar plano ativo\n'+
							  '0Ô∏è‚É£ Cancelar Comando\n\n'+	

							  'üïπ *.sub*\n\n'+
							  '*Status*\n'+
							  'VIP: ' + statusVip +'\n' +
							  'Uso: ' + statusInt +'\n' +
							  'Limite: ' + statusLim
							
							client.sendMessage(message.from, subResponse);
							return;

						case command.startsWith('.menu'):
							let menuResponseAuth = 
									'üí¨ _Saiba o padr√£o de nossos comandos! Eles sempre devem ser iniciados com um ponto final (.) seguido'+
									'de um padr√£o de 3 letras, conforme este exemplo: .bot ; .cfg, entre outros. '+
									'Veja agora os comandos dispon√≠veis em seu plano e uma breve explica√ß√£o deles. Me escreva o comando para usa-lo._\n\n'+

									'üïπ *.cfg*\n'+
									'Descri√ß√£o: _mostra configura√ß√µes ativas do seu bot e detalhes do plano_\n\n'+
									'üïπ *.pin*\n'+
									'Descri√ß√£o: _verifica a disponibiliade e tempo de execu√ß√£o do bot_\n\n'+
									'üïπ *.sub*\n'+
									'Descri√ß√£o: _doa√ß√µes, aquisi√ß√£o e gerenciamento do seu plano_\n\n'+
									'üïπ *.img*\n'+
									'Descri√ß√£o: _cria uma imagem com I.A. com base na descri√ß√£o fornecida_\n\n'+
									'üïπ *.var*\n'+
									'Descri√ß√£o: _gere uma varia√ß√£o por I.A de uma imagem fornecida_\n\n'+
									'üïπ *.stk*\n'+
									'Descri√ß√£o: _gera sticker com base no conte√∫do fornencido. Ao enviar o arquivo em uma conversa normal, automaticamnte tamb√©m ser√° gerado_\n\n'+
									'üïπ *.num*\n'+
									'Descri√ß√£o: _mostra seu n√∫mero de cadastro no banco de dados (importante para ativa√ß√£o dos planos)_\n\n'+
									'üïπ *.clm*\n'+
									'Descri√ß√£o: _obt√©m os detalhes clim√°ticos de algumas localidades_\n\n'+
									'üïπ *.bot*\n'+
									'Descri√ß√£o: _realiza configura√ß√µes das I.As (gpt e dalle)_\n\n'+
									'üïπ *.rst*\n'+
									'Descri√ß√£o: _reseta todo o contexto da conversa com o bot (inicia a conversa do 0)_\n\n'+
									'üïπ *.aud*\n'+
									'Descri√ß√£o: _realiza configura√ß√µes das mensagens de √°udio_\n\n'+
									'üïπ *.ppt*\n'+
									'Descri√ß√£o: _define um prompt. O como o gpt agir√° com voc√™ com base numa descri√ß√£o fornecida_\n\n'+
									'üïπ *.url*\n'+
									'Descri√ß√£o: _define a plataforma a qual encurtar√° as URLs. Para encurtar, envie o comando .url seguido link._\n\n'+
									'üïπ *.mp4*\n'+
									'Descri√ß√£o: _faz o download de v√≠deos do youtube_\n\n'+
									'üïπ *.net*\n'+
									'Descri√ß√£o: _interage com o gpt conectado a internet em tempo real_'
							
							client.sendMessage(message.from, menuResponseAuth);
							return;
						
						case command === '.stk' && !message.hasQuotedMsg && !message.hasMedia:
							userState.activeCommand = '.stk'
							userState.waitingForResponse = true;
							const stkResponse =
								'üïπ *.stk*\n\n'+
								'üí¨ _Para gerar um sticker, envie uma m√≠dia de imagem|video|gif, uma url de imagem, ou algum texto. '+
								'(para url certifique de ser uma imagem. Certifique que contenha ao final da URL a extens√£o ex: .jpg, .png)_'
							message.reply(stkResponse);
							return;
					
						case command.startsWith('.stk'):
							let prompt = command.slice(5).trim(); // Obt√©m o texto ap√≥s '.stk'
							let mediaMessage;
						
							if (message.hasQuotedMsg) {
								const quotedMessage = await message.getQuotedMessage();
								if (quotedMessage.hasMedia) {
									// Mensagem respondida √© m√≠dia
									mediaMessage = quotedMessage;
								} else {
									// Mensagem respondida √© texto
									mediaMessage = quotedMessage;
									mediaMessage.body = prompt === '' ? quotedMessage.body : prompt;
								}
							} else if (message.hasMedia) {
								// Mensagem enviada √© m√≠dia
								mediaMessage = message;
							} else {
								// Mensagem enviada √© texto
								mediaMessage = message;
								mediaMessage.body = prompt;
							}
						
							// Chama handleStkCommand com a mensagem correta
							if (mediaMessage) {
								handleStkCommand(mediaMessage, message.from, client);
							}
							return;
							
						

						case command === '.net':
							userState.activeCommand = '.net'
							userState.waitingForResponse = true;
							const netResponse = 
							'üïπ *.net*\n\n'+
							'üí¨ _Conectado a internet! Atrav√©s deste comando, tentarei responder com base nas informa√ß√µes mais atualizadas poss√≠veis. O que deseja pesquisar ?_'
							message.reply(netResponse);
							return;

						case command.startsWith('.net'):
							handleNetCommand(message, command.substr(5));
							addInteractions(userConfig, 1, userPhone)
							return;
						
						case command.startsWith('.cfg'):
							userState.command = '.cfg';
							message.reply(
								`*[.aud] | Audio*`+
								`\n${statusTts}`+
								`\nüîà ${statusTtsMode}`+
								`\nüó£ ${voiceName}\n\n`+
								`*[.bot] | I.A.*`+
								`\nü§ñ ${statusGpt}`+
								`\nüåê ${statusGptOnOff}`+
								`\nüì∏ ${statusImg}`+
								`\nüñº ${statusDalle}\n\n`+
								`*[.ppt] | Pr√©-Prompt:*`+
								`\nüî§ ${statusPrompt}\n\n`+
								`*[.url] | Encurtador:*`+
								`\nüõ† ${statusUrl}\n\n`+
								`*[Intera√ß√µes]:*`+
								`\n${statusInt}\n\n`+
								`*[Dispon√≠veis]:*`+
								`\n${statusLim}\n\n`+
								`*[.sub] | Plano VIP:*`+
								`\n${statusVip}`);
						
							return;
	
						case command.startsWith('.mp4'):
							userState.activeCommand = '.mp4'
							userState.waitingForResponse = true;
							const mp4Text =
								'üïπ *.mp4*\n\n'+
								'üí¨ _Envie a URL do v√≠deo em que deseja realizar o donwload. √â permitido o envio de video Shorts '+
								'e com dura√ß√£o de at√© 5 minutos, ou digite *0* para cancelar o comando_'								
							message.reply(mp4Text);
							return;

						case command === '.url' && !message.hasQuotedMsg:
							userState.waitingForResponse = true;
							userState.activeCommand = '.url';
							let buttonsUrl = 
							  'üïπ *.url*\n\n'+
							  'üí¨ _Me envie o n√∫mero da op√ß√£o da plataforma que deseja encurtar seu link. Isso √© para caso uma n√£o funcione, tente novamente em outra. '+
							  'Esse comando apenas define a plataforma, para encurtar apenas envie o link para o bot posteriormente_\n\n' +

							  '1Ô∏è‚É£ Linkdev\n'+
							  '2Ô∏è‚É£ Bitly\n'+
							  '3Ô∏è‚É£ Cuttly\n'+
							  '0Ô∏è‚É£ Cancelar Comando'
							
							client.sendMessage(message.from, buttonsUrl);
							return;

						case command.startsWith('.url'):
								let linkToShorten;
								const args = message.body.split(' ');
							
								// Verificar se h√° um link imediatamente ap√≥s o comando
								if (args.length > 1) {
									const possibleLink = args[1];
									if (isValidUrl(possibleLink)) {
										linkToShorten = possibleLink;
									}
								}
							
								// Se n√£o houver um link ap√≥s o comando, verificar mensagem citada
								if (!linkToShorten && message.hasQuotedMsg) {
									const quotedMessage = await message.getQuotedMessage();
									if (quotedMessage.body && isValidUrl(quotedMessage.body)) {
										linkToShorten = quotedMessage.body;
									}
								}
							
								// Fun√ß√£o para validar URL
								function isValidUrl(string) {
									const validUrlPattern = /^(https?:\/\/)?[\w-]+(\.[\w-]+)+[/#?]?.*$/;
									return validUrlPattern.test(string);
								}
							
								if (linkToShorten) {
									// Encurtar o link encontrado
									handleUrsCommand(client, message, linkToShorten, userConfig);
								}
								return;
										
							

						case command.startsWith('.pin'):
							function secondsToHMS(seconds) {
								const h = Math.floor(seconds / 3600);
								const m = Math.floor((seconds % 3600) / 60);
								const s = Math.floor(seconds % 60);
								return `${h}h ${m}m ${s}s`;}

							  const uptimeInSeconds = botReadyTimestamp
							  ? Math.floor((Date.now() - botReadyTimestamp.getTime()) / 1000)
							  : null;
							const uptimeHMS = uptimeInSeconds ? secondsToHMS(uptimeInSeconds) : 'Indispon√≠vel/Unavailable';
							message.reply(
							  `üü¢ Online: *${uptimeHMS}*`
							);
							return;

						case command.startsWith('.num'):
							 message.reply(`üí¨ _N√∫mero de cadastro:_ \n*${message.from}*`);
							 return;
							

						case command.startsWith('.bot'):
							userState.waitingForResponse = true;
							userState.activeCommand = '.bot';
							let buttonsBot = 
							  'üí¨ _Use as op√ß√µes para alternar o modo gpt, tamanhos da imagem da dalle e tamb√©m por qual plataforma deseja criar suas imagens. ' +
							  'As configura√ß√µes do ChatGPT definem sua velocidade e intelig√™ncia onde a vers√£o 3.5 √© mais r√°pida e concisa e a 4.0 uma vers√£o mais demorada por√©m inteligente, '+
							  'As configura√ß√µes de conex√£o do ChatGPT com a internet permite que suas respostas sejam as mais contepor√¢neas poss√≠veis, por√©m sem sempre pode funcionar. '+
							  'As configura√ß√µes de IA de imagem possuem entre si o mesmo dinamismo com varia√ß√µes de qualidade, sendo atodas essas configura√ß√µes dispon√≠veis servem para alternar '+
							  'a plataforma e permitir que o Bot funcione de uma maneira mais est√°vel e dispon√≠vel poss√≠vel. '+
							  'Me envie o n√∫mero referente a configura√ß√£o que voc√™ deseja ativar do bot_\n\n'+
							 
							  '*Op√ß√µes ChatGPT*\n\n'+

							 '1Ô∏è‚É£ GPT 3.5 Turbo\n'+
							 '2Ô∏è‚É£ GPT 4 Turbo\n'+
							 '3Ô∏è‚É£ Conectar GPT internet\n'+
							 '4Ô∏è‚É£ Desconectar GPT internet\n\n'+
														 
							 '*Op√ß√µes IA de Imagens*\n\n'+
							 
							 '5Ô∏è‚É£ Usar DALL-e 2\n'+
							 '6Ô∏è‚É£ Usar DALL-e 3\n'+
							 '7Ô∏è‚É£ Usar Stable Diffusion\n'+
							 '8Ô∏è‚É£ Usar Mid Journey\n'+
							 '0Ô∏è‚É£ Cancelar Comando\n\n'+
							  
							  'üïπ *.bot* ativo\n\n'+
							  '*Status*\n'+
							  'GPT ü§ñ: ' + statusGpt +'\n' +
							  'IMG üì∏: ' + statusImg +'\n' +
							  'size üñº: ' + statusDalle +'\n' +
							  'internet üåê: ' + statusGptOnOff       
						
							client.sendMessage(message.from, buttonsBot);
							return;

							case command.startsWith('.aud'):
								userState.waitingForResponse = true;
								userState.activeCommand = '.aud';
								console.log('TTS Mode:', userConfig.ttsMode[userPhone])
								
								let voiceOptions = ''; 							
								if (statusTtsMode === 'aws-polly') {
									voiceOptions = 
										'3Ô∏è‚É£ Voz masculina [portugu√™s]\n' +
										'4Ô∏è‚É£ Voz feminina [portugu√™s]\n' +
										'5Ô∏è‚É£ Voz masculina [ingl√™s]\n' +
										'6Ô∏è‚É£ Voz feminina [ingl√™s]\n\n' +

										'*Plataforma*\n\n'+

										'7Ô∏è‚É£ Alternar > OpenAI\n'+
										'üÖ∞Ô∏è Ativar transcri√ß√£o √°udio\n'+
										'üÖ±Ô∏è Desativar transcri√ß√£o √°udio\n'+
										'0Ô∏è‚É£ Cancelar Comando\n\n'

								} else { // Presumindo que a outra op√ß√£o seja 'openai'
									voiceOptions = 
										'3Ô∏è‚É£ Voz Alloy\n' +
										'4Ô∏è‚É£ Voz Echo\n' +
										'5Ô∏è‚É£ Voz Fable\n' +
										'6Ô∏è‚É£ Voz Onyx\n' +
										'7Ô∏è‚É£ Voz Nova\n' +
										'8Ô∏è‚É£ Voz Shimmer\n\n'+

										'*Plataforma*\n\n'+

										'9Ô∏è‚É£ Alternar > AWS-Polly\n'+
										'üÖ∞Ô∏è Ativar transcri√ß√£o √°udio\n'+
										'üÖ±Ô∏è Desativar transcri√ß√£o √°udio\n'+
										'0Ô∏è‚É£ Cancelar Comando\n\n'
								}
							
								let buttonsSpk = 
									'üí¨ _Use as op√ß√µes para configurar o recebimento de √°udio. Ligando a op√ß√£o, toda resposta do bot ser√° enviada por √°udio, '+
									'caso desligue as respostas ser√£o por texto. Tamb√©m √© poss√≠vel alterar o idioma na qual deseja receber sua resposta em √°udio. '+
									'Em caso de problemas √© poss√≠vel alterar entre as plataformas que fornecem este servi√ßo vinculado ao bot. '+
									'Me envie o n√∫mero referente √† configura√ß√£o que voc√™ deseja ativar do bot_\n\n'+
									
									'*Funcionamento*\n\n'+
									
									'1Ô∏è‚É£ Ligar envio de √°udio\n'+
									'2Ô∏è‚É£ Desligar envio de √°udio\n\n'+
									
									'*Voz e Idioma*\n\n'+
									
									voiceOptions + // Adiciona as op√ß√µes de voz baseadas no statusTtsMode
																	
									'üïπ *.aud*\n\n'+                                      
									'*Status*\n'+
									'√Åudio:  ' + statusTts +'\n'+
									'Transcri√ß√£o:  ' + statusTsr +'\n'+
									'Modelo üîà: ' + statusTtsMode +'\n'+
									'Voz üó£: ' + voiceName;
								
								client.sendMessage(message.from, buttonsSpk);
								return;
							

						case command.startsWith('.txt'):
							userState.waitingForResponse = true;
							userState.activeCommand = '.txt';
							let buttonsTxt = 
								 'üí¨ _Use as op√ß√µes para configurar as trasncri√ß√µes de √°udio. Ligue caso queira que o bot entenda seus √°udios e o transcreva em texto pra voc√™ e '+
								 'desligue caso n√£o queira essa fun√ß√£o. √â poss√≠vel alternar a plataforma de trasncri√ß√£o, assim caso uma n√£o funcione tente ativar a outra. ' +
								 'Me envie o n√∫mero referente a configura√ß√£o que voc√™ deseja ativar do bot_\n\n'+
							    
								 '*Funcionamento*\n\n'+

								 '1Ô∏è‚É£ Ligar transcri√ß√£o\n'+
								 '2Ô∏è‚É£ Desligar transcri√ß√£o\n\n'+

								 '*Plataforma*\n\n'+
								 
								 '3Ô∏è‚É£ Speech-API\n'+
								 '4Ô∏è‚É£ Whisper-API\n'+
								 '5Ô∏è‚É£ OpenAI\n'+
								 '0Ô∏è‚É£ Cancelar Comando\n\n'+
							  
							  'üïπ *.txt*\n\n'+									  
							  '*Status*\n'+
							  'On | Off:  ' + statusTsr +'\n'+
							  'Modelo ‚úç: ' + statusTxtMode 
							
							
							client.sendMessage(message.from, buttonsTxt);
							return;	

						case command === '.img':
							userState.activeCommand = '.img';
							userState.waitingForResponse = true;
							const DescriptText =
								'üïπ *.img*\n\n'+
								'üí¨ _Descreva a imagem que voc√™ gostaria de ver em sua pr√≥xima mensagem, ou digite *0* para cancelar o comando. '+ 
								'Para grupos √© necess√°rio o uso do comando *.img*, por√©m tamb√©m √© poss√≠vel criar imagens apenas pedindo no privado ao bot, '+
								'Pode haver m√° interpreta√ß√£o quando pedindo diretamente (ex. crie uma imagem...), ent√£o est√° fun√ß√£o est√° dispon√≠vel para solicitar especificamente uma imagem de I.A._'
							message.reply(DescriptText);
							return;

						case command === '.edt':
							userState.activeCommand = '.edt';
							userState.waitingForResponse = true;
							const DescriptText1 =
								'üïπ *.img*\n\n'+
								'üí¨ _Envie uma imagem e depois um prompt_'
							message.reply(DescriptText1);
							return;

						case command === '.var':
							userState.activeCommand = '.var';
							userState.waitingForResponse = true;
							const DescriptText2 =
								'üïπ *.var*\n\n'+
								'üí¨ _Envie uma imagem na qual gostaria de obter uma varia√ß√£o exclusiva desenvolvida por I.A, ou digite *0* para cancelar o comando. '+
								'Para garantir o processo envie imagem no formato .png, e com tamanho at√© 4Mb em formato quadrado (ex: 512x512)_'
							message.reply(DescriptText2);
							return;

						
						case command.startsWith('.img'):
								handleImgCommand(message, userConfig, command.substr(5) );
							return;

						case command === '.gpt':
							userState.activeCommand = '.gpt';
							userState.waitingForResponse = true;
							const DescripText =
								'üïπ *.gpt*\n\n' +
								'üí¨ _Apenas envie a mensagem que deseja que o GPT responda, ou digite *0* para cancelar o comando. ' +
								'Para grupos √© necess√°rio o uso do comando *.gpt*, por√©m tamb√©m √© poss√≠vel conversar apenas enviando uma mensagem normal no privado para o bot._'
							message.reply(DescripText);
							return;

						case command.startsWith('.gpt'):
								const chatGpt = await message.getChat();
								chatGpt.sendStateTyping();
								await new Promise(resolve => setTimeout(resolve, 2000));
								handleMessageGPT(message, command.substr(5), userConfig, client, userPhone);
							return;

						case command.startsWith('.rst'):
							handleDeleteConversation(message, userConfig, client);
							return;

						case command.startsWith('.ppt'):
							userState.activeCommand = '.ppt'
							userState.waitingForResponse = true;
							const PromptText =
								'üïπ *.ppt*\n\n'+
								'üí¨ _Use para incluir um pr√© prompt (como voc√™ deseja que o bot se comporte) e determinar um contexto ou a forma que o GPT te responder√°. '+
								'(envie a pr√≥xima mensagem descrevendo como deseja pr√© configura-lo), ou digite *0* para cancelar o comando. '+
								'Para que o prompt funcione resete sua conversa utilizando o comando *.rst*, ap√≥s definir o pr√© prompt._' 
								
							message.reply(PromptText);
								return;


						case command === '.but':
						// Cria√ß√£o dos bot√µes
						let buttonSpecs = [
  						 	 { id: 'btn1', body: 'bt1' },
   							 { id: 'btn2', body: 'bt2' },
   							 { id: 'btn3', body: 'bt3' }
						];	
						let buttonMessage = new Buttons('Button body', buttonSpecs, 'title', 'footer');
       					 client.sendMessage(message.from, buttonMessage);	

						
						
						case command === '.clm':
							userState.activeCommand = '.clm'
							userState.waitingForResponse = true;
							const ClimateText =
								'üïπ *.clm*\n\n'+
								'üí¨ _Escreva o nome da localidade que deseja saber o clima atual, ou digite *0* para cancelar o comando. '+
								'Caso o comando n√£o funcione tente escrever o nome da localidade em ingl√™s, por exemplo: ao inv√©s de Nova Iorque, mande Nova York._'
							message.reply(ClimateText);
								return;
						
						case command.startsWith('.clm'):
							const chatClm = await message.getChat();
							chatClm.sendStateTyping();
							await new Promise(resolve => setTimeout(resolve, 2000));
								handleClmCommand(command.substr(5), message, client);
								return;
		
						case command.startsWith('.adm'):
							if (message.from !== '5519998790929@c.us') {
									message.reply('‚ö†Ô∏è _Desculpe, voc√™ n√£o tem permiss√£o para usar este comando._')
									return;
							} else {
									const admCommandIndex = message.body.indexOf('.adm');
									const targetUserPhone = message.body.substring(admCommandIndex + 4).trim();                       
									const targetUserConfig = await getUserConfig(targetUserPhone);

									const targetStatusVip = targetUserConfig.authorized ? 'üü¢ *habilitado*' : 'üî¥ *desabilitado*';
									const targetStatusInt = targetUserConfig.userInteractions;
									const targetStatusLim = targetStatusVip === 'üü¢ *habilitado*' ? 'infinito' : targetUserConfig.limitedInteractions;
									const targetAuthCmd = targetUserConfig.authorizedCommand ? 'üü¢ *habilitado*' : 'üî¥ *desabilitado*';
									
									userState.targetUserPhone = targetUserPhone;
									userState.targetUserConfig = targetUserConfig;
						
									userState.activeCommand = '.adm';
									userState.waitingForResponse = true;
								  
							let buttonsAdm = 
								`üí¨ _Use as op√ß√µes para configurar plano para_ ${targetUserPhone}\n\n`+
							   
							   	'1Ô∏è‚É£ Habilitar VIP\n'+
								'2Ô∏è‚É£ Desabilitar VIP\n'+
								'3Ô∏è‚É£ Habilitar comandos\n'+
								'4Ô∏è‚É£ Desabilitar comandos\n'+
								'5Ô∏è‚É£ Adicionar 50 msgs\n'+
								'6Ô∏è‚É£ Adicionar 250 msgs\n'+
								'7Ô∏è‚É£ Adicionar 500 msgs\n'+
								'8Ô∏è‚É£ Resetar para 0 msgs\n'+
								'9Ô∏è‚É£ Resetar intera√ß√µes\n'+
								'üîü + 50  msgs\n'+
								'0Ô∏è‚É£ Cancelar Comando\n\n'+

							  'üïπ *.adm*\n\n'+									  
							  '*Status*\n'+
							  'VIP:  ' + targetStatusVip +'\n'+
							  'Intera√ß√µes: ' + targetStatusInt +'\n'+
							  'Limite: ' + targetStatusLim +'\n'+
							  'Commandos: ' + targetAuthCmd 
							
							client.sendMessage(message.from, buttonsAdm);
							
								// Chame novamente a fun√ß√£o verifyUserLimits ap√≥s atualizar as intera√ß√µes e limites do usu√°rio
							if (await verifyUserLimits(userPhone)) {
								return;
							}
						
							return;	
							  }
						}
					}	
				}	
				
				
//************************************************************************************//

		// Ignore if message is from status broadcast
		if (message.from == constants.statusBroadcast) return;


		// Notice about commands
		const messageText = message.body.toLowerCase();
		const knowledgeBaseAnswer = searchKnowledgeBase(messageText);
		
		if (knowledgeBaseAnswer) {
			// Envie a resposta da base de conhecimento e retorne para n√£o processar o restante do c√≥digo
			message.reply(knowledgeBaseAnswer);
			return;
		  }
		  
		if (!isGroupMessage) {
			await handleIncomingMessage(message, userConfig, client);
		}
		

	}});


//************************************************************************************//



// Resposta √† mensagem pr√≥pria
client.on(Events.MESSAGE_CREATE, async (message: Message) => {

    // Verifica se a mensagem foi enviada pelo pr√≥prio bot
    if (message.from === botPhoneNumber) return;

    // Ignora se a mensagem for de transmiss√£o de status
    if (message.from == constants.statusBroadcast) return;

    // Ignora se for uma mensagem citada (exemplo: resposta do bot)
    if (message.hasQuotedMsg) return;

    // Ignora se a mensagem n√£o for minha
    if (!message.fromMe) return;

    // Obt√©m o n√∫mero de telefone do usu√°rio a partir do remetente da mensagem
    const userPhone = message.from;

    // Obt√©m a configura√ß√£o do usu√°rio usando o n√∫mero de telefone do usu√°rio
    const userConfig = await getUserConfig(userPhone);
    
    // Trata a mensagem recebida
	if (userConfig.searchTool == true){
		handleNetCommand(message, message.body)
	} 
	

    await handleIncomingMessage(message, userConfig, client);
		
});



//************************************************************************************//


	// Inicializa√ß√£o do WhatsAp
	client.initialize();
};

start();

export { botReadyTimestamp, userPhone, Message, userConfigs, userSettings};
